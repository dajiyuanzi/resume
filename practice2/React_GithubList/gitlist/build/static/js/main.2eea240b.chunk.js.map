{"version":3,"sources":["logo.svg","components/data.js","components/repo_board.js","components/user_board.js","components/search.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getData","url","pageNum","callback","axios","get","params","page","then","res","catch","error","console","log","rep_board","props","state","projects","loadAnimation","isLoading","count","this","setState","data","items","bind","projectsDom","map","item","index","class","key","id","href","html_url","name","description","stargazers_count","ref","onScroll","scrollLoad","style","display","refs","container","clientHeight","scrollTop","content","scrollHeight","concat","Component","user_board","src","avatar_url","alt","login","search","inputValue","type","placeholder","value","onChange","inputGet","onClick","searchBtn","event","target","Footer","repo","user","footerColor","window","location","pathname","className","to","App","exact","path","component","repo_board","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2eea240b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios'\r\n\r\nexport default function getData(url, pageNum, callback){\r\n  axios.get(url, {\r\n    params:{\r\n      page:pageNum\r\n    }\r\n  })\r\n    .then(function (res){\r\n      //console.log(res)\r\n      callback(res)\r\n    })\r\n    .catch(function (error) {\r\n       console.log(error);\r\n    });\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport getData from './data'\r\n\r\nexport default class rep_board extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      projects: [],\r\n      loadAnimation: \"block\"\r\n    }\r\n    this.pageNum=1\r\n    this.isLoading = false //默认ajax不发送请求 判断是否正加载\r\n    this.count=30 //githubapi每页的数据条目数。this特指 属于类的实例 的自身环境，this.xxx特指实例环境中的变量\r\n    this.url='https://api.github.com/search/repositories?q=language:javascript&sort=stars&order=desc'\r\n\r\n    getData(this.url, this.pageNum, function(res){ //运行引入的函数，不是声明\r\n      this.setState({\r\n        projects: res.data.items,\r\n        loadAnimation: \"none\"\r\n      })\r\n    }.bind(this)) //回调要指定为当前的运行环境，因此要用bind或者箭头函数\r\n  }\r\n\r\n  render(){\r\n    let projectsDom = this.state.projects.map(( item, index )=>{ //这里要用箭头函数，将回调的context设置在此class，而不是变量自身的环境（详见 回调函数的笔记）\r\n      return (\r\n        <div class=\"item\" key={item.id}>\r\n          <a href={item.html_url}>\r\n            <div class=\"order\"><span>{index+1}</span></div>\r\n            <div class=\"detail\">\r\n              <h2>{ item.name }</h2>\r\n              <div class=\"description\">{ item.description }</div>\r\n              <div class=\"extra\">\r\n                <span class=\"star-count\">{ item.stargazers_count } star</span>\r\n              </div>  \r\n            </div>\r\n          </a>\r\n        </div>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <section ref=\"container\" id=\"repo-board\" onScroll={this.scrollLoad.bind(this)}>\r\n        <div ref=\"content\" class=\"container\">\r\n          {projectsDom}\r\n        </div>\r\n        <div class=\"loading\" style={{ display:this.state.loadAnimation }}><span class=\"iconfont icon-loading\"></span></div>\r\n        {/* 加载中，默认display: none;，加载时显示 */}\r\n      </section>\r\n    )\r\n  }\r\n\r\n  scrollLoad(){\r\n    if(\r\n      //判断触底 滚动到靠近底部才加载,\r\n      (this.refs.container.clientHeight+this.refs.container.scrollTop+50 > this.refs.content.scrollHeight) &&\r\n      \r\n      //节流:判断是否正加载, 数据没有完成&没有在加载中，就不要发送请求。\r\n      (this.isLoading === false)\r\n    ){\r\n      this.isLoading = true \r\n      this.pageNum++\r\n      this.setState({loadAnimation: \"block\"})\r\n      getData(this.url, this.pageNum, function(res){\r\n        this.setState({ //setState更新数据和渲染\r\n          projects: this.state.projects.concat(res.data.items), //concat把新旧数据数组相连成一串，push会把整个数组作为一个数组元素塞进去。\r\n          loadAnimation: \"none\"\r\n        })\r\n        this.isLoading = false\r\n\r\n        // console.log('hahaha scroll')\r\n        // console.log(this.pageNum)\r\n        // console.log(this.isLoading)\r\n        // console.log(this.state.projects)\r\n      }.bind(this))\r\n    }\r\n  }\r\n    \r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport getData from './data'\r\n\r\nexport default class user_board extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      projects: [],\r\n      loadAnimation: \"block\"\r\n    }\r\n    this.pageNum=1\r\n    this.isLoading = false //默认ajax不发送请求 判断是否正加载\r\n    this.count=30 //githubapi每页的数据条目数。this特指 属于类的实例 的自身环境，this.xxx特指实例环境中的变量\r\n    this.url='https://api.github.com/search/users?q=followers:>1000+location:china+language:javascript'\r\n\r\n    getData(this.url, this.pageNum, function(res){ //运行引入的函数，不是声明\r\n      this.setState({\r\n        projects: res.data.items,\r\n        loadAnimation: \"none\"\r\n      })\r\n    }.bind(this)) //回调要指定为当前的运行环境，因此要用bind或者箭头函数\r\n  }\r\n\r\n  render(){\r\n    let projectsDom = this.state.projects.map(( item, index )=>{ //这里要用箭头函数，将回调的context设置在此class，而不是变量自身的环境（详见 回调函数的笔记）\r\n      return (\r\n        <div class=\"item\" key={item.id}>\r\n          <a href={item.html_url}>\r\n            <div class=\"cover\"><img src={item.avatar_url} alt=\"\"/></div>\r\n            <div class=\"detail\">\r\n              <h2>{item.login}</h2>\r\n            </div>\r\n          </a>\r\n        </div>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <section ref=\"container\" id=\"user-board\" onScroll={this.scrollLoad.bind(this)}>\r\n        <div ref=\"content\" class=\"container\">\r\n          {projectsDom}\r\n        </div>\r\n        <div class=\"loading\" style={{ display:this.state.loadAnimation }}><span class=\"iconfont icon-loading\"></span></div>\r\n        {/* 加载中，默认display: none;，加载时显示 */}\r\n      </section>\r\n    )\r\n  }\r\n\r\n  scrollLoad(){\r\n    if(\r\n      //判断触底 滚动到靠近底部才加载,\r\n      (this.refs.container.clientHeight+this.refs.container.scrollTop+50 > this.refs.content.scrollHeight) &&\r\n      \r\n      //节流:判断是否正加载, 数据没有完成&没有在加载中，就不要发送请求。\r\n      (this.isLoading === false)\r\n    ){\r\n      this.isLoading = true \r\n      this.pageNum++\r\n      this.setState({loadAnimation: \"block\"})\r\n      getData(this.url, this.pageNum, function(res){\r\n        this.setState({ //setState更新数据和渲染\r\n          projects: this.state.projects.concat(res.data.items), //concat把新旧数据数组相连成一串，push会把整个数组作为一个数组元素塞进去。\r\n          loadAnimation: \"none\"\r\n        })\r\n        this.isLoading = false\r\n\r\n        // console.log('hahaha scroll')\r\n        // console.log(this.pageNum)\r\n        // console.log(this.isLoading)\r\n        // console.log(this.state.projects)\r\n      }.bind(this))\r\n    }\r\n  }\r\n    \r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport getData from './data'\r\n\r\nexport default class search extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      projects: [],\r\n      loadAnimation: \"none\",\r\n      inputValue:''\r\n    }\r\n    this.pageNum=1\r\n    this.isLoading = false //默认ajax不发送请求 判断是否正加载\r\n    this.count=30 //githubapi每页的数据条目数。this特指 属于类的实例 的自身环境，this.xxx特指实例环境中的变量\r\n    this.url=''\r\n  }\r\n\r\n  render(){\r\n    let projectsDom = this.state.projects.map(( item, index )=>{ //这里要用箭头函数，将回调的context设置在此class，而不是变量自身的环境（详见 回调函数的笔记）\r\n      return (\r\n        <div class=\"item\" key={item.id}>\r\n          <a href={item.html_url}>\r\n            <div class=\"order\"><span>{index+1}</span></div>\r\n            <div class=\"detail\">\r\n              <h2>{ item.name }</h2>\r\n              <div class=\"description\">{ item.description }</div>\r\n              <div class=\"extra\">\r\n                <span class=\"star-count\">{ item.stargazers_count } star</span>\r\n              </div>  \r\n            </div>\r\n          </a>\r\n        </div>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <section ref=\"container\" id=\"search\" onScroll={this.scrollLoad.bind(this)}>\r\n        <div ref=\"content\" class=\"wrap\">\r\n          <div class=\"search-area\">\r\n            <input type=\"text\" placeholder=\"Search repos\" \r\n              value={this.state.inputValue}\r\n              onChange={this.inputGet.bind(this)}\r\n            />\r\n            <span class=\"button\" onClick={this.searchBtn.bind(this)}> Search</span>\r\n          </div>\r\n          <div class=\"search-result\">\r\n            <div class=\"container\">{projectsDom}</div>\r\n            <div class=\"loading\" style={{ display:this.state.loadAnimation }}><span class=\"iconfont icon-loading\"></span></div>\r\n            {/* 加载中，默认display: none;，加载时显示 */}\r\n          </div> \r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n\r\n  inputGet(event){ //双向绑定：state传入组件的value以显示，onchange把新数据写入state\r\n    this.setState({\r\n      inputValue: event.target.value\r\n    })\r\n  }\r\n\r\n  searchBtn(){\r\n    this.url=`https://api.github.com/search/repositories?q=${this.state.inputValue}+language:javascript&sort=stars&order=desc`\r\n    this.pageNum=1 //每次搜索都从第1页开始，清除之前搜索的页码\r\n\r\n    if(this.isLoading === false){ //节流:判断是否正加载, 数据没有完成&没有在加载中，就不要发送请求。\r\n      this.isLoading = true\r\n      this.setState({loadAnimation: \"block\"})//播放 加载动画\r\n      getData(this.url, this.pageNum, function(res){ //运行引入的函数，不是声明\r\n        this.setState({\r\n          projects: res.data.items,\r\n          loadAnimation: \"none\" //关闭动画\r\n        })\r\n        this.isLoading = false\r\n      }.bind(this)) //回调要指定为当前的运行环境，因此要用bind或者箭头函数\r\n    }\r\n  }\r\n\r\n  scrollLoad(){\r\n    if(\r\n      //判断触底 滚动到靠近底部才加载,\r\n      (this.refs.container.clientHeight+this.refs.container.scrollTop+50 > this.refs.content.scrollHeight) &&\r\n      \r\n      //节流:判断是否正加载, 数据没有完成&没有在加载中，就不要发送请求。\r\n      (this.isLoading === false)\r\n    ){\r\n      this.isLoading = true \r\n      this.pageNum++\r\n      this.setState({loadAnimation: \"block\"})\r\n      getData(this.url, this.pageNum, function(res){\r\n        this.setState({ //setState更新数据和渲染\r\n          projects: this.state.projects.concat(res.data.items), //concat把新旧数据数组相连成一串，push会把整个数组作为一个数组元素塞进去。\r\n          loadAnimation: \"none\"\r\n        })\r\n        this.isLoading = false\r\n\r\n        // console.log('hahaha scroll')\r\n        // console.log(this.pageNum)\r\n        // console.log(this.isLoading)\r\n        // console.log(this.state.projects)\r\n      }.bind(this))\r\n    }\r\n  }\r\n    \r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport default class Footer extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      repo: '',\r\n      user:'',\r\n      search:''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){ //当直接更改地址时，整个页面刷新，会被触发；当点击路由link，不会触发整个页面刷新\r\n    this.footerColor()\r\n  }\r\n\r\n  footerColor(){\r\n    switch(window.location.pathname){\r\n      case '/' : case '/repo':\r\n        this.setState({\r\n          repo: 'active',\r\n          user:'',\r\n          search:''\r\n        })\r\n        break\r\n      case '/user':\r\n        this.setState({\r\n          repo: '',\r\n          user:'active',\r\n          search:''\r\n        })\r\n        break\r\n      case '/search':\r\n        this.setState({\r\n          repo: '',\r\n          user:'',\r\n          search:'active'\r\n        })\r\n        break\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <footer>\r\n        <div className={this.state.repo} onClick={this.footerColor.bind(this)}>\r\n          <span class=\"iconfont icon-paihang\"></span><span><Link to=\"/repo\">Top repos</Link></span>\r\n        </div>\r\n        <div className={this.state.user} onClick={this.footerColor.bind(this)}>\r\n          <span class=\"iconfont icon-beimei\"></span><span><Link to=\"/user\">Top users</Link></span>\r\n        </div>\r\n        <div className={this.state.search} onClick={this.footerColor.bind(this)}>\r\n          <span class=\"iconfont icon-search\"></span><span><Link to=\"/search\">Search</Link></span>\r\n        </div>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './components/iconfont.css'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\"\nimport repo_board from './components/repo_board'\nimport user_board from './components/user_board'\nimport search from './components/search'\nimport Footer from './components/footer'\n\nclass App extends Component {\n  render(){\n    return (\n      <div>    \n          <Router>\n            <main>\n              <Route exact path=\"/\" component={repo_board} />\n              <Route path=\"/repo\" component={repo_board} />\n              <Route path=\"/user\" component={user_board} />\n              <Route path=\"/search\" component={search} />\n            </main>\n            <Footer />\n          </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}