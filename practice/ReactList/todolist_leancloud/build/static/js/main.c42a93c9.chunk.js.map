{"version":3,"sources":["TodoInput.js","TodoItem.js","leanCloud.js","ForgotPasswordForm.js","SignUpForm.js","SignInForm.js","SignInOrSignUp.js","UserDialog.js","App.js","serviceWorker.js","index.js"],"names":["submit","props","e","key","target","value","trim","onSubmit","changeTitle","onChange","type","content","className","bind","onKeyPress","TodoItem","checked","this","todo","status","toggle","title","onClick","delete","onToggle","onDelete","Component","AV","init","appId","appKey","serverURLs","TodoModel","getByUser","user","successFn","errorFn","query","Query","equalTo","find","then","response","array","map","t","id","attributes","call","error","create","deleted","Object","extend","set","acl","ACL","setPublicReadAccess","setWriteAccess","User","current","setReadAccess","setACL","save","update","createWithoutData","undefined","destroy","todoId","getCurrentUser","getUserFromAVUser","AVUser","ForgotPasswordForm","formData","email","href","onSignIn","username","password","onForgotPassword","SignInOrSignUp","state","selected","setState","switch","SignUpForm","onSignUp","SignInForm","UserDialog","selectedTab","preventDefault","setUsername","setPassword","setEmail","signUp","loginedUser","code","alert","logIn","signIn","todoInit","stateCopy","JSON","parse","stringify","changeFormData","showForgotPassword","resetPassword","returnToSignIn","requestPasswordReset","success","App","newTodo","todoList","initTodoGetByUser","todos","filter","item","index","signOut","addTodo","onSignUpOrSignIn","logOut","oldStatus","event","push","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iWAIA,SAASA,EAAOC,EAAOC,GAER,UAAVA,EAAEC,KAI0B,KAA1BD,EAAEE,OAAOC,MAAMC,QAChBL,EAAMM,SAASL,GAKrB,SAASM,EAAYP,EAAOC,GAC1BD,EAAMQ,SAASP,GAIF,eAAUD,GAEvB,OACE,2BAAOS,KAAK,OAEVL,MAAOJ,EAAMU,QACbC,UAAU,YACVH,SAAUD,EAAYK,KAAK,KAAMZ,GACjCa,WAAYd,EAAOa,KAAK,KAAMZ,MC1Bfc,G,uLAEjB,OACE,yBAAKH,UAAU,YACb,2BACEF,KAAK,WACLM,QAAkC,cAAzBC,KAAKhB,MAAMiB,KAAKC,OACzBV,SAAUQ,KAAKG,OAAOP,KAAKI,QAE7B,0BAAML,UAAU,SAASK,KAAKhB,MAAMiB,KAAKG,OACzC,4BAAQC,QAASL,KAAKM,OAAOV,KAAKI,OAAlC,a,6BAICf,GACLe,KAAKhB,MAAMuB,SAAStB,EAAGe,KAAKhB,MAAMiB,Q,6BAE7BhB,GACLe,KAAKhB,MAAMwB,SAASvB,EAAGe,KAAKhB,MAAMiB,U,GAlBAQ,c,omBCGtCC,IAAGC,KAAK,CACNC,MAJU,oCAKVC,OAJY,2BAKZC,WAJY,yCAOCJ,EAAf,EAAeA,IAOFK,EAAY,CACvBC,UADuB,SACbC,EAAMC,EAAWC,GAEzB,IAAIC,EAAQ,IAAIV,IAAGW,MAAM,QACzBD,EAAME,QAAQ,WAAW,GACzBF,EAAMG,OAAOC,MAAK,SAACC,GACjB,IAAIC,EAAQD,EAASE,KAAI,SAACC,GACxB,OAAO,EAAP,CAAQC,GAAID,EAAEC,IAAOD,EAAEE,eAEzBZ,EAAUa,KAAK,KAAML,MACpB,SAACM,GACFb,GAAWA,EAAQY,KAAK,KAAMC,OAGlCC,OAduB,WAcUf,EAAWC,GAAS,IAA7CjB,EAA4C,EAA5CA,OAAQE,EAAoC,EAApCA,MAAO8B,EAA6B,EAA7BA,QAEjBjC,EAAO,IADAS,IAAGyB,OAAOC,OAAO,SAE5BnC,EAAKoC,IAAI,QAASjC,GAClBH,EAAKoC,IAAI,SAAUnC,GACnBD,EAAKoC,IAAI,UAAWH,GAKpB,IAAII,EAAM,IAAI5B,IAAG6B,IACjBD,EAAIE,qBAAoB,GACxBF,EAAIG,eAAe/B,IAAGgC,KAAKC,WAAW,GACtCL,EAAIM,cAAclC,IAAGgC,KAAKC,WAAW,GACrC1C,EAAK4C,OAAOP,GAEZrC,EAAK6C,OAAOtB,MAAK,SAASC,GACxBP,EAAUa,KAAK,KAAMN,EAASI,OAC7B,SAASG,GACVb,GAAWA,EAAQY,KAAK,KAAMC,OAGlCe,OApCuB,WAoCc7B,EAAWC,GAAS,IAAjDU,EAAgD,EAAhDA,GAAIzB,EAA4C,EAA5CA,MAAOF,EAAqC,EAArCA,OAAQgC,EAA6B,EAA7BA,QAErBjC,EAAOS,IAAGyB,OAAOa,kBAAkB,OAAQnB,QACrCoB,IAAV7C,GAAuBH,EAAKoC,IAAI,QAASjC,QAC9B6C,IAAX/C,GAAwBD,EAAKoC,IAAI,SAAUnC,QAC/B+C,IAAZf,GAAyBjC,EAAKoC,IAAI,UAAWH,GAW7CjC,EAAK6C,OAAOtB,MAAK,SAACC,GAChBP,GAAaA,EAAUa,KAAK,SAC3B,SAACC,GAAD,OAAWb,GAAWA,EAAQY,KAAK,KAAMC,OAE9CkB,QAxDuB,SAwDfC,EAAQjC,EAAWC,GAYzBJ,EAAUgC,OAAO,CAAClB,GAAIsB,EAAQjB,SAAS,GAAOhB,EAAWC,KAqCtD,SAASiC,IACd,IAAInC,EAAOP,IAAGgC,KAAKC,UACnB,OAAG1B,EACMoC,EAAkBpC,GAElB,KAkBX,SAASoC,EAAkBC,GACzB,OAAO,EAAP,CACEzB,GAAIyB,EAAOzB,IACRyB,EAAOxB,Y,ICpJOyB,E,iLAEjB,OACE,yBAAK5D,UAAU,kBACb,8CACA,0BAAMA,UAAU,iBAAiBL,SAAUU,KAAKhB,MAAMM,UAAtD,IACE,yBAAKK,UAAU,OACb,wCACA,2BACEF,KAAK,OACLL,MAAOY,KAAKhB,MAAMwE,SAASC,MAC3BjE,SAAUQ,KAAKhB,MAAMQ,SAASI,KAAK,KAAM,YAG7C,yBAAKD,UAAU,eACb,4BAAQF,KAAK,UAAb,uBACA,uBAAGiE,KAAK,IAAIrD,QAASL,KAAKhB,MAAM2E,UAAhC,wB,GAhBoClD,aCEjC,WAASzB,GACtB,OACE,0BAAMW,UAAU,SAASL,SAAUN,EAAMM,SAASM,KAAKI,OAAvD,IACE,yBAAKL,UAAU,OACb,wCACA,2BACEF,KAAK,OACLL,MAAOJ,EAAMwE,SAASC,MACtBjE,SAAUR,EAAMQ,SAASI,KAAK,KAAM,YAGxC,yBAAKD,UAAU,OACb,4CACA,2BACEF,KAAK,OACLL,MAAOJ,EAAMwE,SAASI,SACtBpE,SAAUR,EAAMQ,SAASI,KAAK,KAAM,eAGxC,yBAAKD,UAAU,OACb,2CACA,2BAAOF,KAAK,WACVL,MAAOJ,EAAMwE,SAASK,SACtBrE,SAAUR,EAAMQ,SAASI,KAAK,KAAM,eAGxC,yBAAKD,UAAU,eACb,4BAAQF,KAAK,UAAb,cC7BO,WAAST,GACtB,OACE,0BAAMW,UAAU,SAASL,SAAUN,EAAMM,UAAzC,IACE,yBAAKK,UAAU,OACb,4CACA,2BAAOF,KAAK,OACVL,MAAOJ,EAAMwE,SAASI,SACtBpE,SAAUR,EAAMQ,SAASI,KAAK,KAAM,eAGxC,yBAAKD,UAAU,OACb,2CACA,2BAAOF,KAAK,WACVL,MAAOJ,EAAMwE,SAASK,SACtBrE,SAAUR,EAAMQ,SAASI,KAAK,KAAM,eAGxC,yBAAKD,UAAU,eACb,4BAAQF,KAAK,UAAb,SACA,uBAAGiE,KAAK,IAAIrD,QAASrB,EAAM8E,kBAA3B,kCCjBaC,E,YACnB,WAAY/E,GAAO,IAAD,8BAChB,4CAAMA,KACDgF,MAAQ,CACXC,SAAU,UAHI,E,oEAOVhF,GACNe,KAAKkE,SAAS,CACZD,SAAUhF,EAAEE,OAAOC,U,+BAKrB,OACE,yBAAKO,UAAU,kBACb,6BACE,+BACE,2BACEF,KAAK,QACLL,MAAM,SACNW,QAAiC,WAAxBC,KAAKgE,MAAMC,SACpBzE,SAAUQ,KAAKmE,OAAOvE,KAAKI,QAL/B,aAQA,+BACE,2BACEP,KAAK,QACLL,MAAM,SACNW,QAAiC,WAAxBC,KAAKgE,MAAMC,SACpBzE,SAAUQ,KAAKmE,OAAOvE,KAAKI,QAL/B,WASF,yBAAKL,UAAU,SACY,WAAxBK,KAAKgE,MAAMC,SACV,kBAACG,EAAD,CACEZ,SAAUxD,KAAKhB,MAAMwE,SACrBlE,SAAUU,KAAKhB,MAAMqF,SACrB7E,SAAUQ,KAAKhB,MAAMQ,WAErB,KAEqB,WAAxBQ,KAAKgE,MAAMC,SACV,kBAACK,EAAD,CACEd,SAAUxD,KAAKhB,MAAMwE,SACrBhE,SAAUQ,KAAKhB,MAAMQ,SACrBF,SAAUU,KAAKhB,MAAM2E,SACrBG,iBAAkB9D,KAAKhB,MAAM8E,mBAE/B,W,GAnDgCrD,aCIvB8D,E,YACnB,WAAYvF,GAAO,IAAD,8BAChB,4CAAMA,KACDgF,MAAQ,CAEXQ,YAAa,iBACbhB,SAAU,CACRC,MAAO,GACPG,SAAU,GACVC,SAAU,KARE,E,oEAmBX5E,GAAG,IAAD,OACPA,EAAEwF,iBADK,MAE2BzE,KAAKgE,MAAMR,UL6D1C,SAAgBC,EAAOG,EAAUC,EAAU3C,EAAWC,GAE3D,IAAIF,EAAO,IAAIP,IAAGgC,KAGlBzB,EAAKyD,YAAYd,GAGjB3C,EAAK0D,YAAYd,GAGjB5C,EAAK2D,SAASnB,GAGdxC,EAAK4D,SAASrD,MAAK,SAASsD,GAC1B,IAAI7D,EAAOoC,EAAkByB,GAC7B5D,EAAUa,KAAK,KAAMd,MACpB,SAASe,GACVb,EAAQY,KAAK,KAAMC,MKhEnB6C,CAjBO,EAEFpB,MAFE,EAEKG,SAFL,EAEeC,UACR,SAAC5C,GACb,EAAKjC,MAAMqF,SAAStC,KAAK,KAAMd,MAGrB,SAACe,GACX,OAAOA,EAAM+C,MACX,KAAK,IACHC,MAAM,8CACN,MACF,QACEA,MAAMhD,S,6BAMP/C,GAAG,IAAD,OACPA,EAAEwF,iBADK,MAEoBzE,KAAKgE,MAAMR,ULkEnC,SAAgBI,EAAUC,EAAU3C,EAAWC,GACpDT,IAAGgC,KAAKuC,MAAMrB,EAAUC,GAAUrC,MAAK,SAASsD,GAC9C,IAAI7D,EAAOoC,EAAkByB,GAC7B5D,EAAUa,KAAK,KAAMd,MACpB,SAASe,GACVb,EAAQY,KAAK,KAAMC,MKxDnBkD,CAjBO,EAEFtB,SAFE,EAEQC,UACD,SAAC5C,GACb,EAAKjC,MAAM2E,SAAS5B,KAAK,KAAMd,GAC/B,EAAKjC,MAAMmG,SAASpD,KAAK,SAEf,SAACC,GACX,OAAOA,EAAM+C,MACX,KAAK,IACHC,MAAM,0DACN,MACF,QACEA,MAAMhD,S,qCAuBC9C,EAAKD,GAClB,IAAImG,EAAYC,KAAKC,MAAMD,KAAKE,UAAUvF,KAAKgE,QAC/CoB,EAAU5B,SAAStE,GAAOD,EAAEE,OAAOC,MACnCY,KAAKkE,SAASkB,K,+BAId,OACE,yBAAKzF,UAAU,sBACb,yBAAKA,UAAU,cACe,mBAA3BK,KAAKgE,MAAMQ,YACV,kBAAC,EAAD,CACEhB,SAAUxD,KAAKgE,MAAMR,SACrBG,SAAU3D,KAAKkF,OAAOtF,KAAKI,MAC3BqE,SAAUrE,KAAK6E,OAAOjF,KAAKI,MAC3BR,SAAUQ,KAAKwF,eAAe5F,KAAKI,MACnC8D,iBAAkB9D,KAAKyF,mBAAmB7F,KAAKI,QAEjD,kBAAC,EAAD,CACEwD,SAAUxD,KAAKgE,MAAMR,SACrBlE,SAAUU,KAAK0F,cAAc9F,KAAKI,MAClCR,SAAUQ,KAAKwF,eAAe5F,KAAKI,MACnC2D,SAAU3D,KAAK2F,eAAe/F,KAAKI,Y,2CAS7C,IAAIoF,EAAYC,KAAKC,MAAMD,KAAKE,UAAUvF,KAAKgE,QAC/CoB,EAAUZ,YAAc,iBACxBxE,KAAKkE,SAASkB,K,uCAGd,IAAIA,EAAYC,KAAKC,MAAMD,KAAKE,UAAUvF,KAAKgE,QAC/CoB,EAAUZ,YAAc,iBACxBxE,KAAKkE,SAASkB,K,oCAEFnG,GLeT,IAAgCwE,EAAOvC,EAAWC,EKdrDlC,EAAEwF,iBLciChB,EKbZzD,KAAKgE,MAAMR,SAASC,MLc7C/C,IAAGgC,KAAKkD,qBAAqBnC,GAAOjC,MAAK,SAASqE,GAChD3E,EAAUa,UACT,SAASC,GAEVb,EAAQY,KAAK,KAAMC,U,GKvIiBvB,aC6KzBqF,E,YAnIb,WAAY9G,GAAO,IAAD,8BAChB,4CAAMA,KACDgF,MAAQ,CACX/C,KAAMmC,GAAkB,GACxB2C,QAAS,GACTC,SAAU,IAIZ,EAAKC,oBATW,E,sEAYT,IAAD,OAEFC,EAAQlG,KAAKgE,MAAMgC,SACpBG,QAAO,SAACC,GAAD,OAASA,EAAKlE,WACrBP,KAAI,SAACyE,EAAMC,GACZ,OAGE,wBAAInH,IAAKmH,GACP,kBAAC,EAAD,CACEpG,KAAMmG,EACN7F,SAAU,EAAKJ,OAAOP,KAAK,GAC3BY,SAAU,EAAKF,OAAOV,KAAK,SAOnC,OACE,yBAAKD,UAAU,OACf,4BACGK,KAAKgE,MAAMJ,UAAY,KAD1B,SAEG5D,KAAKgE,MAAM/C,KAAKY,GAAK,4BAAQxB,QAASL,KAAKsG,QAAQ1G,KAAKI,OAAnC,WAA6D,MAEnF,yBAAKL,UAAU,gBAGb,kBAAC,EAAD,CACED,QAASM,KAAKgE,MAAM+B,QACpBvG,SAAUQ,KAAKT,YAAYK,KAAKI,MAChCV,SAAUU,KAAKuG,QAAQ3G,KAAKI,SAGhC,wBAAIL,UAAU,YACXuG,GAEFlG,KAAKgE,MAAM/C,KAAKY,GACf,KACA,kBAAC,EAAD,CACEwC,SAAUrE,KAAKwG,iBAAiB5G,KAAKI,MACrC2D,SAAU3D,KAAKwG,iBAAiB5G,KAAKI,MACrCmF,SAAUnF,KAAKiG,kBAAkBrG,KAAKI,W,gCN8BhDU,IAAGgC,KAAK+D,SMrBN,IAAIrB,EAAYC,KAAKC,MAAMD,KAAKE,UAAUvF,KAAKgE,QAC/CoB,EAAUnE,KAAO,GACjBjB,KAAKkE,SAASkB,K,uCAECnE,GAIf,IAAImE,EAAYC,KAAKC,MAAMD,KAAKE,UAAUvF,KAAKgE,QAC/CoB,EAAUnE,KAAOA,EACjBjB,KAAKkE,SAASkB,K,wFAMI,IAAD,OACbnE,EAAOmC,IACRnC,GACDF,EAAUC,UAAUC,GAAM,SAACiF,GACzB,IAAId,EAAYC,KAAKC,MAAMD,KAAKE,UAAU,EAAKvB,QAC/CoB,EAAUY,SAAWE,EACrB,EAAKhC,SAASkB,Q,6BAIbnG,EAAGgB,GAAM,IAAD,OACTyG,EAAYzG,EAAKC,OACrBD,EAAKC,OAAuB,cAAdD,EAAKC,OAAuB,GAAK,YAC/Ca,EAAUgC,OAAO9C,GAAM,WACrB,EAAKiE,SAAS,EAAKF,UAClB,SAAChC,GACF/B,EAAKC,OAASwG,EACd,EAAKxC,SAAS,EAAKF,Y,kCAGX2C,GACV3G,KAAKkE,SAAS,CACZ6B,QAASY,EAAMxH,OAAOC,MACtB4G,SAAUhG,KAAKgE,MAAMgC,a,8BAGjBW,GAAO,IAAD,OAERZ,EAAU,CACZ3F,MAAOuG,EAAMxH,OAAOC,MACpBc,OAAQ,GACRgC,SAAS,GAEXnB,EAAUkB,OAAO8D,GAAS,SAAClE,GACzBkE,EAAQlE,GAAKA,EACb,EAAKmC,MAAMgC,SAASY,KAAKb,GACzB,EAAK7B,SAAS,CACZ6B,QAAS,GACTC,SAAU,EAAKhC,MAAMgC,cAEtB,SAAChE,GACF6E,QAAQC,IAAI9E,Q,6BAGT2E,EAAO1G,GAAM,IAAD,OACjBc,EAAUmC,QAAQjD,EAAK4B,IAAI,WACzB5B,EAAKiC,SAAU,EACf,EAAKgC,SAAS,EAAKF,c,GA/HPvD,aCrCEsG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlG,MAAK,SAAAmG,GACjCA,EAAaC,kB","file":"static/js/main.c42a93c9.chunk.js","sourcesContent":["import React from 'react'\r\nimport './TodoInput.css'\r\n\r\n\r\nfunction submit(props, e){\r\n  //console.log(e) 查看是否参数传进来了\r\n  if(e.key === 'Enter') { //当按回车了\r\n    // console.log('用户按回车了')\r\n\r\n    //如果用户在输入框里什么都不写就敲回车，那么就拒绝用户\r\n    if(e.target.value.trim() !== ''){ //trim() 方法用于删除字符串的头尾空格, 不会改变原始字符串。\r\n      props.onSubmit(e)\r\n    }\r\n  }\r\n}\r\n\r\nfunction changeTitle(props, e){\r\n  props.onChange(e)\r\n}\r\n\r\n\r\nexport default function (props) {\r\n  //<input defaultValue={xx}/>中的defaultValue 只会影响input的第一次值，后面 newTodo 怎么变，都不会影响 input\r\n  return (\r\n    <input type=\"text\" \r\n      // defaultValue={this.props.content} \r\n      value={props.content}\r\n      className=\"TodoInput\"\r\n      onChange={changeTitle.bind(null, props)} //这里函数的调用context 要设为null(即全局)，因为App.js bind了它调用时的context\r\n      onKeyPress={submit.bind(null, props)}\r\n    />\r\n  )\r\n}\r\n\r\n// onChange 事件执行函数会传递一个事件 e，这里bind null就是给 父组件调用它时的context而产生的this 腾个位置，防止props被当成this\r\n\r\n// 搞不清楚 bind 用法的同学，请看完 MDN\r\n// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\r\n// 尤其是示例要看懂","import React, { Component } from 'react'\r\nimport './TodoItem.css'\r\n\r\nexport default class TodoItem extends Component {\r\n  render(){  //satus在addTodo中初始为null\r\n    return (\r\n      <div className=\"TodoItem\">\r\n        <input \r\n          type=\"checkbox\" \r\n          checked={this.props.todo.status==='completed'} \r\n          onChange={this.toggle.bind(this)}\r\n        />\r\n        <span className=\"title\">{this.props.todo.title}</span>\r\n        <button onClick={this.delete.bind(this)}>Delete</button>\r\n      </div>\r\n    )\r\n  }\r\n  toggle(e){\r\n    this.props.onToggle(e, this.props.todo)\r\n  }\r\n  delete(e){\r\n    this.props.onDelete(e, this.props.todo)\r\n  }\r\n}\r\n","import AV from 'leancloud-storage'\r\n\r\n//拷贝leancloud初始化代码, 这些码和地址都是leancloud生成的\r\nvar APP_ID ='v14NvWPzvoqzf1OAVFrlamua-gzGzoHsz'\r\nvar APP_KEY = '4kTB4FACraYqwnn9IWrmlmHV'\r\nvar serURLs = 'https://v14nvwpz.lc-cn-n1-shared.com'\r\nAV.init({\r\n  appId: APP_ID,\r\n  appKey: APP_KEY,\r\n  serverURLs: serURLs\r\n})\r\n\r\nexport default AV\r\n\r\n//下面用的是leancloud的接口\r\n\r\n\r\n// 把所有跟 Todo 相关的 LeanCloud 操作都放到这个对象里，而不是一个个接口export\r\n// 所有跟 Todo 相关的 LeanCloud 操作都放到这里\r\nexport const TodoModel = {\r\n  getByUser(user, successFn, errorFn){ //请求todo的数据\r\n    // 文档见 https://leancloud.cn/docs/leanstorage_guide-js.html#批量操作\r\n    let query = new AV.Query('Todo')\r\n    query.equalTo('deleted', false) //获取所有deleted属性为false的todo\r\n    query.find().then((response)=>{\r\n      let array = response.map((t)=>{ //map(func)返回一个新数组，其元素为原始数组元素调用处理函数后的值。\r\n        return {id: t.id, ...t.attributes}\r\n      })\r\n      successFn.call(null, array)\r\n    }, (error)=>{\r\n      errorFn && errorFn.call(null, error)\r\n    })\r\n  },\r\n  create({status, title, deleted}, successFn, errorFn){\r\n    let Todo = AV.Object.extend('Todo') // 声明leancloud的1个class，下面存入云端,leancloud回自动给每条数据加id\r\n    let todo = new Todo() // 构建对象\r\n    todo.set('title', title) // 为属性赋值 key+value\r\n    todo.set('status', status)\r\n    todo.set('deleted', deleted)\r\n\r\n    //只获得属于当前用户的todo，使用 Access Control Layer 访问控制层，让新建的 todo 只能被当前用户访问\r\n    // 根据文档 https://leancloud.cn/docs/acl-guide.html#hash-1171845695\r\n    // 这样做就可以让这个 Todo 只被当前用户看到\r\n    let acl = new AV.ACL()\r\n    acl.setPublicReadAccess(false) // 注意这里是false。默认当前用户可读，默认public 不可写。\r\n    acl.setWriteAccess(AV.User.current(), true)\r\n    acl.setReadAccess(AV.User.current(), true)\r\n    todo.setACL(acl)\r\n\r\n    todo.save().then(function(response){\r\n      successFn.call(null, response.id)\r\n    }, function(error){\r\n      errorFn && errorFn.call(null, error) //结合性Associative property: a=1&&3 返回3；a=1||3返回1。 或|| 即使第一个false，还会往下看，第二个数为true在返回第二个；两边皆true，返回第一个数（与&&相反），即第一个true则不再往下看了。\r\n    });\r\n  },\r\n  update({id, title, status, deleted}, successFn, errorFn){\r\n    // 文档 https://leancloud.cn/docs/leanstorage_guide-js.html#更新对象\r\n    let todo = AV.Object.createWithoutData('Todo', id)\r\n    title !== undefined && todo.set('title', title) //!==先执行，其优先级高于&&\r\n    status !== undefined && todo.set('status', status)\r\n    deleted !== undefined && todo.set('deleted', deleted)\r\n    // 为什么我要像上面那样写代码？\r\n    // 考虑如下场景\r\n    // update({id:1, title:'hi'})\r\n    // 调用 update 时，很有可能没有传 status 和 deleted\r\n    // 也就是说，用户只想「局部更新」\r\n    // 所以我们只 set 该 set 的\r\n    // 那么为什么不写成 title && todo.set('title', title) 呢，为什么要多此一举跟 undefined 做对比呢？\r\n    // 考虑如下场景\r\n    // update({id:1, title: '', status: null}}\r\n    // 用户想将 title 和 status 置空，我们要满足\r\n    todo.save().then((response) => {\r\n      successFn && successFn.call(null)\r\n    }, (error) => errorFn && errorFn.call(null, error))\r\n  },\r\n  destroy(todoId, successFn, errorFn){\r\n    \r\n    //删除数据\r\n    // 文档 https://leancloud.cn/docs/leanstorage_guide-js.html#删除对象\r\n    // let todo = AV.Object.createWithoutData('Todo', todoId)\r\n    // todo.destroy().then(function (response) {\r\n    //   successFn && successFn.call(null)\r\n    // }, function (error) {\r\n    //   errorFn && errorFn.call(null, error)\r\n    // });\r\n\r\n    // 我们不应该删除数据，而是将数据标记为 deleted，这样方便用户查看他删掉的todo\r\n    TodoModel.update({id: todoId, deleted: true}, successFn, errorFn)\r\n  }\r\n}\r\n\r\nexport function signUp(email, username, password, successFn, errorFn){\r\n  // 新建AVUser对象实例\r\n  var user = new AV.User()\r\n\r\n  // 设置用户名\r\n  user.setUsername(username)\r\n\r\n  //设置密码\r\n  user.setPassword(password)\r\n\r\n  //设置邮箱\r\n  user.setEmail(email)\r\n\r\n  //注册判断 \r\n  user.signUp().then(function(loginedUser){\r\n    let user = getUserFromAVUser(loginedUser)\r\n    successFn.call(null, user)\r\n  }, function(error){\r\n    errorFn.call(null, error)\r\n  })\r\n\r\n  return undefined\r\n}\r\n\r\nexport function signIn(username, password, successFn, errorFn){\r\n  AV.User.logIn(username, password).then(function(loginedUser){\r\n    let user = getUserFromAVUser(loginedUser)\r\n    successFn.call(null, user) //默认执行context在非严格下 为全局window，当UserDialog组件调用 此回调successFn时, 才是successFn的context\r\n  }, function(error){\r\n    errorFn.call(null, error)\r\n  })\r\n}\r\n\r\nexport function getCurrentUser(){\r\n  let user = AV.User.current()\r\n  if(user){\r\n    return getUserFromAVUser(user)\r\n  }else{\r\n    return null\r\n  }\r\n}\r\n\r\nexport function signOut(){\r\n  AV.User.logOut()\r\n  return undefined\r\n}\r\n\r\nexport function sendPasswordResetEmail(email, successFn, errorFn){ //js的function的参数不需要全填上，不用的参数也算是预留的接口\r\n  AV.User.requestPasswordReset(email).then(function(success){ //leancloud内的用户对象\r\n    successFn.call()\r\n  }, function(error){\r\n    //console.dir(error) //在控制台中显示指定JavaScript对象的属性，并通过类似文件树样式的交互列表显示。\r\n    errorFn.call(null, error)\r\n  })\r\n}\r\n\r\nfunction getUserFromAVUser(AVUser){\r\n  return {\r\n    id: AVUser.id, //leancloud中 数据对象 是leancloud自动生成的\r\n    ...AVUser.attributes //attributes是leancloud中 用户对象 的属性\r\n  }\r\n}\r\n//console.log(AV.User.current().attributes)\r\n","import React, {Component} from 'react'\r\n\r\nexport default class ForgotPasswordForm extends Component {\r\n  render(){\r\n    return (\r\n      <div className=\"forgotPassword\">\r\n        <h3>Reset Password</h3>\r\n        <form className=\"forgotPassword\" onSubmit={this.props.onSubmit}> {/* 登录*/}\r\n          <div className=\"row\">\r\n            <label>Email</label>\r\n            <input \r\n              type=\"text\" \r\n              value={this.props.formData.email}\r\n              onChange={this.props.onChange.bind(null, 'email')}\r\n            />\r\n          </div>\r\n          <div className=\"row actions\">\r\n            <button type=\"submit\">Send the Reset Mail</button>\r\n            <a href=\"#\" onClick={this.props.onSignIn}>Back to Login</a>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n//如果一个组件只有 props 没有 state，你就可以把它写成一个函数\r\n\r\nexport default function(props) {\r\n  return (\r\n    <form className=\"signUp\" onSubmit={props.onSubmit.bind(this)}> {/* Register */}\r\n      <div className=\"row\">\r\n        <label>Email</label>\r\n        <input \r\n          type=\"text\"\r\n          value={props.formData.email}\r\n          onChange={props.onChange.bind(null, 'email')}\r\n        />\r\n      </div>\r\n      <div className=\"row\">\r\n        <label>User Name</label>\r\n        <input \r\n          type=\"text\" \r\n          value={props.formData.username} \r\n          onChange={props.onChange.bind(null, 'username')} \r\n        />{/* bind 不仅可以绑定 this，还可以绑定第一个参数,。这里执行context设为null，因为UserDialog绑定了它的context */}\r\n      </div>\r\n      <div className=\"row\">\r\n        <label>Password</label>\r\n        <input type=\"password\"\r\n          value={props.formData.password}\r\n          onChange={props.onChange.bind(null, 'password')}\r\n        />\r\n      </div>\r\n      <div className=\"row actions\">\r\n        <button type=\"submit\">Sign Up</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function(props) {\r\n  return (\r\n    <form className=\"signIn\" onSubmit={props.onSubmit}> {/* Login */}\r\n      <div className=\"row\">\r\n        <label>User Name</label>\r\n        <input type=\"text\" \r\n          value={props.formData.username} \r\n          onChange={props.onChange.bind(null, 'username')} \r\n        />\r\n      </div> \r\n      <div className=\"row\">\r\n        <label>Password</label>\r\n        <input type=\"password\"\r\n          value={props.formData.password}\r\n          onChange={props.onChange.bind(null, 'password')}\r\n        />\r\n      </div>\r\n      <div className=\"row actions\">\r\n        <button type=\"submit\">Login</button>\r\n        <a href=\"#\" onClick={props.onForgotPassword}>Do you forget the password?</a>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n// onChange 事件执行函数会传递一个事件 e，这里bind null就是给 父组件调用它时的context而产生的this 腾个位置，防止props被当成this","import React, {Component} from 'react'\r\nimport SignUpForm from './SignUpForm'\r\nimport SignInForm from './SignInForm'\r\n\r\nexport default class SignInOrSignUp extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      selected: 'signUp' //默认显示注册'signIn'\r\n    }\r\n  }\r\n\r\n  switch (e) {  //切换登录和注册\r\n    this.setState({\r\n      selected: e.target.value\r\n    })\r\n  } \r\n\r\n  render(){\r\n    return (\r\n      <div className=\"signInOrSignUp\">\r\n        <nav>\r\n          <label>\r\n            <input \r\n              type=\"radio\" \r\n              value=\"signUp\" \r\n              checked={this.state.selected === 'signUp'}\r\n              onChange={this.switch.bind(this)}\r\n            /> Register\r\n          </label>\r\n          <label>\r\n            <input \r\n              type=\"radio\" \r\n              value=\"signIn\" \r\n              checked={this.state.selected === 'signIn'}\r\n              onChange={this.switch.bind(this)}\r\n            /> Login\r\n          </label>\r\n        </nav>\r\n        <div className=\"panes\">\r\n          {this.state.selected === 'signUp' ? \r\n            <SignUpForm \r\n              formData={this.props.formData} \r\n              onSubmit={this.props.onSignUp}\r\n              onChange={this.props.onChange}\r\n            />\r\n            : null\r\n          }\r\n          {this.state.selected === 'signIn' ? \r\n            <SignInForm \r\n              formData={this.props.formData}\r\n              onChange={this.props.onChange}\r\n              onSubmit={this.props.onSignIn}\r\n              onForgotPassword={this.props.onForgotPassword}\r\n            />\r\n          : null}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './UserDialog.css'\r\nimport {signUp, signIn, sendPasswordResetEmail} from './leanCloud'\r\n\r\nimport ForgotPasswordForm from './ForgotPasswordForm'\r\nimport SignInOrSignUp from './SignInOrSignUp'\r\n\r\n\r\nexport default class UserDialog extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      // selected: 'signUp', //默认显示注册 'signIn'\r\n      selectedTab: 'signInOrSignUp', // 'forgotPassword'\r\n      formData: {\r\n        email: '',\r\n        username: '',\r\n        password: ''\r\n      }\r\n    }\r\n  }\r\n  // switch (e) {  //切换登录和注册\r\n  //   this.setState({\r\n  //     selected: e.target.value\r\n  //   })\r\n  // } \r\n  //与selected属性移到组件，将signInOrSignUp抽离成一个组件，注意state和props的区别\r\n\r\n  signUp(e){\r\n    e.preventDefault() //取消事件的默认动作,比如form点击submit后自动提交发送数据\r\n    let {email, username, password} = this.state.formData\r\n    let success = (user)=>{ //user是通过 作为signUp回调参数，从leanCloud.js拿到的数据\r\n      this.props.onSignUp.call(null, user) \r\n      //默认context设null，非严格模式下即window全局，但App.js在传入时已bind为UserDialog所处的context（其实，直接func(user)也行，只是这样更合形式上的逻辑）\r\n    }\r\n    let error = (error)=>{\r\n      switch(error.code){ //leancloud的服务状态码\r\n        case 202:\r\n          alert('用户名已被占用')\r\n          break\r\n        default:\r\n          alert(error)\r\n          break\r\n      }\r\n    }\r\n    signUp(email, username, password, success, error) //这里面的signUp()是调用的src/leanCloud.js里的方法，外层的是定义的父组件里的方法。\r\n  }\r\n  signIn(e){\r\n    e.preventDefault()\r\n    let {username, password} = this.state.formData\r\n    let success = (user)=>{\r\n      this.props.onSignIn.call(null, user)\r\n      this.props.todoInit.call(null) //再次请求数据\r\n    }\r\n    let error = (error)=>{\r\n      switch(error.code){\r\n        case 210:\r\n          alert('用户名与密码不匹配')\r\n          break\r\n        default:\r\n          alert(error)\r\n          break\r\n      }     \r\n    }\r\n    signIn(username, password, success, error)\r\n  }\r\n\r\n  //登录注册form的input 不断把 onChange监听的state变动 渲染回到input value上\r\n  // changeUsername(e){\r\n  //   // this.state.formData.username = e.target.value\r\n  //   // this.setState(this.state)\r\n  //   // 像上面这样写会看到一个警告 warning  Do not mutate state directly. Use setState()\r\n    \r\n  //   let stateCopy = JSON.parse(JSON.stringify(this.state)) //用JSON深拷贝\r\n  //   stateCopy.formData.username = e.target.value\r\n  //   this.setState(stateCopy)\r\n  // }\r\n  // changePassword(e){\r\n  //   let stateCopy = JSON.parse(JSON.stringify(this.state)) //用JSON深拷贝\r\n  //   stateCopy.formData.password = e.target.value\r\n  //   this.setState(stateCopy)\r\n  // }\r\n  //将 changeUserName 和 changePassword 优化成一个函数 changeFormData\r\n  changeFormData(key, e){ //登录注册form的input 不断把 onChange监听的state变动 渲染回到input value上\r\n    let stateCopy = JSON.parse(JSON.stringify(this.state)) //用JSON深拷贝\r\n    stateCopy.formData[key] = e.target.value\r\n    this.setState(stateCopy)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"UserDialog-Wrapper\">\r\n        <div className=\"UserDialog\">\r\n          {this.state.selectedTab === 'signInOrSignUp' ? \r\n            <SignInOrSignUp\r\n              formData={this.state.formData}\r\n              onSignIn={this.signIn.bind(this)}\r\n              onSignUp={this.signUp.bind(this)}\r\n              onChange={this.changeFormData.bind(this)}\r\n              onForgotPassword={this.showForgotPassword.bind(this)}\r\n            /> : \r\n            <ForgotPasswordForm \r\n              formData={this.state.formData} \r\n              onSubmit={this.resetPassword.bind(this)}\r\n              onChange={this.changeFormData.bind(this)}\r\n              onSignIn={this.returnToSignIn.bind(this)}\r\n            />\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  showForgotPassword(){\r\n    let stateCopy = JSON.parse(JSON.stringify(this.state))\r\n    stateCopy.selectedTab = 'forgotPassword'\r\n    this.setState(stateCopy)\r\n  }\r\n  returnToSignIn(){\r\n    let stateCopy = JSON.parse(JSON.stringify(this.state))\r\n    stateCopy.selectedTab = 'signInOrSignUp' //把页面改回 登录/注册\r\n    this.setState(stateCopy)\r\n  }\r\n  resetPassword(e){\r\n    e.preventDefault()\r\n    sendPasswordResetEmail(this.state.formData.email)\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoInput from './TodoInput.js'\nimport TodoItem from './TodoItem.js'\nimport 'normalize.css'\nimport './reset.css'\nimport UserDialog from './UserDialog'\nimport { getCurrentUser, signOut, TodoModel } from './leanCloud'\n\n\n//移到leanCloud.js\n//拷贝leancloud初始化代码, 这些码和地址都是leancloud生成的\n// import AV from 'leancloud-storage'\n// var APP_ID ='v14NvWPzvoqzf1OAVFrlamua-gzGzoHsz'\n// var APP_KEY = '4kTB4FACraYqwnn9IWrmlmHV'\n// var serURLs = 'https://v14nvwpz.lc-cn-n1-shared.com'\n// AV.init({\n//   appId: APP_ID,\n//   appKey: APP_KEY,\n//   serverURLs: serURLs\n// })\n\n//测试 leancloud 功能\n// var TestObject = AV.Object.extend('TestObject')\n// var testObject = new TestObject()\n// testObject.save({\n//   words: 'Hello World!'\n// }).then(function(object) {\n//   alert('LeanCloud Rocks!')\n// })\n\n\n//存储对象的数据,测试代码\n// import AV from './leanCloud'\n// // 声明类型\n// var TodoFolder = AV.Object.extend('TodoFolder');\n// // 新建对象\n// var todoFolder = new TodoFolder();\n// // 设置名称\n// todoFolder.set('name','工作');\n// // 设置优先级\n// todoFolder.set('priority',1);\n// todoFolder.save().then(function (todo) {\n//   console.log('objectId is ' + todo.id);\n// }, function (error) {\n//   console.error(error);\n// });\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      user: getCurrentUser || {}, //当前用户  leancloud回自动给每条数据加id, getCurrentUser将获得并返回\n      newTodo: '', //输入框内渲染出的值，最开始的默认值 为空字符，以content变量 传给子组件TodoInput\n      todoList: []  \n      // {id:1, title:'1st Todo Item'}, 这是设计的数据格式\n      // {id:1, title:'2nd Todo Item'}\n    }\n    this.initTodoGetByUser() //请求数据\n  }\n\n  render(){\n    //待办条目\n    let todos = this.state.todoList\n      .filter((item)=>!item.deleted)  //只展示没有被删除的todo。filter返回数组的一个子集，回调函数用于逻辑判断是否返回，返回true则把当前元素加入到返回数组中，false则不加\n      .map((item, index)=>{ //map遍历数组，回调函数返回值 组成一个新数组返回，新数组索引结构和原数组一致，原数组不变\n      return (\n        // <li>{item.title}</li>\n        // onToggle是传入的变量  key是react要求每个li都要有不同的编号\n        <li key={index}>\n          <TodoItem \n            todo={item} \n            onToggle={this.toggle.bind(this)} \n            onDelete={this.delete.bind(this)}\n          />\n        </li>\n      )\n    })//渲染在下面 {todos}\n    //console.log(todos)\n\n    return (\n      <div className=\"App\">\n      <h1>\n        {this.state.username || 'My'} Todos\n        {this.state.user.id ? <button onClick={this.signOut.bind(this)}>SignOut</button> : null}\n      </h1>\n        <div className=\"inputWrapper\">\n          {/*注意 value= 后面不要加引号，加了会错*/}\n          {/* <input type=\"text\" value={this.state.newTodo}/> */}\n          <TodoInput \n            content={this.state.newTodo}\n            onChange={this.changeTitle.bind(this)} \n            onSubmit={this.addTodo.bind(this)} \n          />\n        </div>\n        <ol className=\"todoList\">\n          {todos}\n        </ol>\n        {this.state.user.id ? \n          null : \n          <UserDialog \n            onSignUp={this.onSignUpOrSignIn.bind(this)}\n            onSignIn={this.onSignUpOrSignIn.bind(this)}\n            todoInit={this.initTodoGetByUser.bind(this)}\n          /> \n        }\n      </div>\n    )\n  }\n\n  signOut(){\n    signOut() //这里面的signOut()是调用的src/leanCloud.js里的方法，外层的是定义的父组件里的方法。\n    let stateCopy = JSON.parse(JSON.stringify(this.state))\n    stateCopy.user = {}\n    this.setState(stateCopy)\n  }\n  onSignUpOrSignIn(user){\n    // this.state.user = user\n    // this.setState(this.state)\n    // 消除「不要直接修改 state」的警告,如下方案实现数据更新，即全部重新赋值。可以直接赋值，只是不推荐而已；后面改成Redux的，先写挫的再升级\n    let stateCopy = JSON.parse(JSON.stringify(this.state))\n    stateCopy.user = user\n    this.setState(stateCopy)\n  }\n\n  componentDidUpdate(){\n    \n  }\n  initTodoGetByUser(){\n    let user = getCurrentUser()\n    if(user){\n      TodoModel.getByUser(user, (todos)=>{ //请求todo数据\n        let stateCopy = JSON.parse(JSON.stringify(this.state))\n        stateCopy.todoList = todos\n        this.setState(stateCopy) //更新状态数据，react自动局部更新渲染\n      })\n    }\n  }\n  toggle(e, todo){ //item的<input checkbox/>有change时触发以下判断：satus此时在addTodo中初始为null，所以被赋值为completed\n    let oldStatus = todo.status\n    todo.status = todo.status==='completed' ? '' : 'completed' //如果是status已经是completed, 触发change时再设为空(去掉勾)\n    TodoModel.update(todo, () => {\n      this.setState(this.state)\n    }, (error) => {\n      todo.status = oldStatus\n      this.setState(this.state)\n    })\n  }\n  changeTitle(event){ //用户输入时 把输入值更新渲染到输入框\n    this.setState({\n      newTodo: event.target.value,\n      todoList: this.state.todoList\n    })\n  }\n  addTodo(event){ \n    //console.log('我得添加一个todo了')\n    let newTodo = {\n      title: event.target.value,\n      status: '', //leancloud要求 status 应该是一个 Object 而不是一个 String。由于我们一开始讲 status 设置为 null，导致 LeanCloud 认为 status 是个对象\n      deleted: false\n    }\n    TodoModel.create(newTodo, (id)=>{ //leancloud回自动给每条数据加id, 在leancloud以回调传回到这里\n      newTodo.id = id  \n      this.state.todoList.push(newTodo)\n      this.setState({ //更新数据\n        newTodo: '',\n        todoList: this.state.todoList\n      })\n    }, (error)=>{\n      console.log(error)\n    })\n  }\n  delete(event, todo){\n    TodoModel.destroy(todo.id, () => {\n      todo.deleted = true\n      this.setState(this.state)\n    })   \n  }\n} //render()\n\nexport default App;\n\n// let id = 0\n// function idMaker(){\n//   id += 1\n//   return id\n// }\n// leancloud回自动给每条数据加id\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}